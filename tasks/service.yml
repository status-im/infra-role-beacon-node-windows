---
- name: Create windows service
  include_role: name=infra-role-winsw
  vars:
    winsw_service_id: '{{ beacon_node_service_name }}'
    winsw_service_name: 'Beacon Node {{ beacon_node_network }} ({{ beacon_node_repo_branch }})'
    winsw_service_description: 'Nimbus Eth2 Beacon Node running on {{ beacon_node_network }} network using {{ beacon_node_repo_branch }} branch.'
    winsw_service_user: 'nimbus'
    winsw_service_logon_enabled: true
    winsw_service_logon_domain: '{{ ansible_netbios_name }}'
    winsw_service_logon_pass: '{{ beacon_node_service_user_pass }}'
    winsw_service_log_size: 1024000
    winsw_service_log_keep: 10
    winsw_service_log_stderr_disabled: true
    winsw_service_exe_path: '{{ beacon_node_service_exe }}'
    winsw_service_arguments: |
      --non-interactive
      --network={{ beacon_node_network }}
      --data-dir="{{ beacon_node_data_path }}"
      --secrets-dir="{{ beacon_node_secrets_path }}"
      --validators-dir="{{ beacon_node_validators_path }}"
      --era-dir="{{ beacon_node_era_dir_path }}"
      --history="{{ beacon_node_history_retention }}"
      {% if beacon_node_exec_layer_urls|length == 0 %}
      --no-el=true
      {% else %}
      {% for url in beacon_node_exec_layer_urls | mandatory %}
      --el="{{ url | mandatory }}"
      {% endfor %}
      {% endif %}
      {% if beacon_node_exec_layer_jwt_secret is defined %}
      --jwt-secret="{{ beacon_node_exec_layer_jwt_secret_path | mandatory }}"
      {% endif %}
      {% if beacon_node_suggested_fee_recipient is defined %}
      --suggested-fee-recipient={{ beacon_node_suggested_fee_recipient | mandatory }}
      {% endif %}
      --log-format={{ beacon_node_log_format }}
      --log-level={{ beacon_node_log_level }}
      --nat=extip:{{ beacon_node_public_address }}
      --tcp-port={{ beacon_node_listening_port }}
      --udp-port={{ beacon_node_discovery_port }}
      --max-peers={{ beacon_node_max_peers }}
      --num-threads={{ beacon_node_threads }}
      --slashing-db-kind={{ beacon_node_slashing_db_kind }}
      --insecure-netkey-password=true
      --subscribe-all-subnets={{ beacon_node_subscribe_all | to_json }}
      --doppelganger-detection={{ beacon_node_doppelganger_detection | to_json }}
      --rest={{ beacon_node_rest_enabled | to_json }}
      {% if beacon_node_rest_enabled %}
      --rest-address={{ beacon_node_rest_address }}
      --rest-port={{ beacon_node_rest_port }}
      --rest-max-body-size={{ beacon_node_rest_max_body_size | mandatory }}
      --rest-max-headers-size={{ beacon_node_rest_max_headers_size | mandatory }}
      {% if beacon_node_rest_allow_origin != '' %}
      --rest-allow-origin="{{ beacon_node_rest_allow_origin }}"
      {% endif %}
      {% endif %}
      --metrics={{ beacon_node_metrics_enabled | to_json }}
      {% if beacon_node_metrics_enabled %}
      --metrics-address={{ beacon_node_metrics_address }}
      --metrics-port={{ beacon_node_metrics_port }}
      {% endif %}
      {% if beacon_node_validator_monitor_auto %}
      --validator-monitor-auto
      {% endif %}
      {% if beacon_node_validator_monitor_totals %}
      --validator-monitor-totals
      {% endif %}
      {% for pubkey in beacon_node_validator_monitor_pubkeys %}
      --validator-monitor-pubkey={{ pubkey }}
      {% endfor %}
      {% if beacon_node_light_client_data_enabled %}
      --light-client-data-serve={{ beacon_node_light_client_data_serve | to_json }}
      --light-client-data-import-mode={{ beacon_node_light_client_data_import_mode }}
      {% if beacon_node_light_client_data_max_periods >= 0 %}
      --light-client-data-max-periods={{ beacon_node_light_client_data_max_periods }}
      {% endif %}
      {% endif %}
      {% for extra_flag in beacon_node_extra_flags %}
      {{ extra_flag }}
      {% endfor %}
