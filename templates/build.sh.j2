#!/usr/bin/env bash
# vim: ft=sh
set -e

function headIsDetached() {
    [[ $(git rev-parse --abbrev-ref --symbolic-full-name HEAD) == "HEAD" ]];
}

function binaryExists() {
    ls -l build/nimbus_${COMMIT} 2>&1 1>/dev/null
}

function fetchChanges() {
    # We cannot use "git pull" in here, because history may be changed upstream
    git fetch
    git reset --hard "origin/${BRANCH}"
}

function buildBinaries() {
    # Control number of jobs used to lower impact on running nodes
    export MAKEFLAGS="-j{{ beacon_node_build_jobs | int }}"

    # Just one process so it doesn't affect the running beacon nodes.
    make update OVERRIDE=1
    make {{ beacon_node_build_targets | join(" ") }} \
        LOG_LEVEL="{{ beacon_node_build_log_level }}" \
        NIMFLAGS="{{ beacon_node_build_nim_flags }}"

    cd build/

{% for target in beacon_node_build_targets %}
    # Rename binaries to match commit the were built from.
    mv "build/{{ target }}.exe" "build/{{ target }}_${COMMIT}.exe"
    # Create a symbolic link to the latest version
    ln -vfrs "{{ target }}_${COMMIT}" "${INSTALL_PATH}/{{ target }}"

{% endfor %}
    # Delete copies that are older than N days
    find . -mtime +{{ beacon_node_build_days_kept }} -exec rm '{}' \+
}

#-------------------------------------------------------------------------------

# Fix for symlink creation in Windows Git Bash.
# WARNING: Works only for Administrator and SYSTEM users.
export MSYS=winsymlinks:nativestrict

BRANCH="{{ beacon_node_repo_branch }}"
INSTALL_PATH="{{ beacon_node_bin_path }}"
SERVICE_NAME="{{ beacon_node_service_name }}"
SERVICE_PATH="{{ beacon_node_service_path }}"

echo " >>> Build Start: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

# Fixes: 'fatal: detected dubious ownership in repository'
git config --global --add safe.directory '{{ beacon_node_service_path }}\repo'

cd "${SERVICE_PATH}"

# Build the Beacon node binaries
pushd repo >/dev/null

# Detached HEAD means we're probably on a tag
if headIsDetached; then
    echo " >>> Deatached HEAD, nothing to fetch."
else
    echo " >>> Fetching changes..."
    fetchChanges
fi

COMMIT=$(git rev-parse --short=8 HEAD)

if binaryExists && [[ "$1" != "--force" ]]; then
    echo " >>> Binary already built. Run with --force flag to override"
else
    echo " >>> Building binaries..."
    buildBinaries

    # restart service
    echo " >>> Restarting service..."
    net stop "${SERVICE_NAME}"
    net start "${SERVICE_NAME}"
fi

popd >/dev/null

echo " >>> SUCCESS!"
